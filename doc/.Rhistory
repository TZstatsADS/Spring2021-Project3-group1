if(!require("EBImage")){
install.packages("BiocManager")
BiocManager::install("EBImage")
}
install.packages("BiocManager")
if(!require("EBImage")){
install.packages("BiocManager")
BiocManager::install("EBImage")
}
if(!require("R.matlab")){
install.packages("R.matlab")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("dplyr")){
install.packages("dplyr")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("ggplot2")){
install.packages("ggplot2")
}
if(!require("caret")){
install.packages("caret")
}
if(!require("glmnet")){
install.packages("glmnet")
}
if(!require("WeightedROC")){
install.packages("WeightedROC")
}
library(R.matlab)
library(readxl)
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
if(!require("EBImage")){
install.packages("BiocManager")
BiocManager::install("EBImage")
}
if(!require("R.matlab")){
install.packages("R.matlab")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("dplyr")){
install.packages("dplyr")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("ggplot2")){
install.packages("ggplot2")
}
if(!require("caret")){
install.packages("caret")
}
if(!require("EBImage")){
install.packages("BiocManager")
BiocManager::install("EBImage")
}
if(!require("R.matlab")){
install.packages("R.matlab")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("dplyr")){
install.packages("dplyr")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("ggplot2")){
install.packages("ggplot2")
}
if(!require("caret")){
install.packages("caret")
}
if(!require("glmnet")){
install.packages("glmnet")
}
if(!require("WeightedROC")){
install.packages("WeightedROC")
}
library(R.matlab)
library(readxl)
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
if(!require("EBImage")){
install.packages("BiocManager")
BiocManager::install("EBImage")
}
if(!require("R.matlab")){
install.packages("R.matlab")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("dplyr")){
install.packages("dplyr")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("ggplot2")){
install.packages("ggplot2")
}
if(!require("caret")){
install.packages("caret")
}
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
if(!require("EBImage")){
install.packages("BiocManager")
BiocManager::install("EBImage")
}
if(!require("R.matlab")){
install.packages("R.matlab")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("dplyr")){
install.packages("dplyr")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("ggplot2")){
install.packages("ggplot2")
}
if(!require("caret")){
install.packages("caret")
}
if(!require("glmnet")){
install.packages("glmnet")
}
install.packages("dplyr")
if(!require("WeightedROC")){
install.packages("WeightedROC")
}
library(R.matlab)
library(readxl)
library(dplyr)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
if(!require("EBImage")){
install.packages("BiocManager")
BiocManager::install("EBImage")
}
if(!require("R.matlab")){
install.packages("R.matlab")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("dplyr")){
install.packages("dplyr")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("ggplot2")){
install.packages("ggplot2")
}
if(!require("caret")){
install.packages("caret")
}
if(!require("glmnet")){
install.packages("glmnet")
}
if(!require("WeightedROC")){
install.packages("WeightedROC")
}
library(R.matlab)
library(readxl)
library(dplyr)
library(EBImage)
library(ggplot2)
library(caret)
library(glmnet)
library(WeightedROC)
library(MASS)
library(vtreat)
train_dir <- "../data/train_set/" # This will be modified for different data sets.
train_image_dir <- paste(train_dir, "images/", sep="")
train_pt_dir <- paste(train_dir,  "points/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
run.cv <- TRUE # run cross-validation on the training set
sample.reweight <- TRUE # run sample reweighting in model training
K <- 5  # number of CV folds
run.feature.train <- TRUE # process features for training set
run.test <- TRUE # run evaluation on an independent test set
run.feature.test <- TRUE # process features for test set
lmbd = c(1e-3, 5e-3, 1e-2, 5e-2, 1e-1)
model_labels = paste("LASSO Penalty with lambda =", lmbd)
#train-test split
info <- read.csv(train_label_path)
n <- nrow(info)
n_train <- round(n*(4/5), 0)
train_idx <- sample(info$Index, n_train, replace = F)
test_idx <- setdiff(info$Index, train_idx)
n_files <- length(list.files(train_image_dir))
image_list <- list()
for(i in 1:100){
image_list[[i]] <- readImage(paste0(train_image_dir, sprintf("%04d", i), ".jpg"))
}
#function to read fiducial points
#input: index
#output: matrix of fiducial points corresponding to the index
readMat.matrix <- function(index){
return(round(readMat(paste0(train_pt_dir, sprintf("%04d", index), ".mat"))[[1]],0))
}
#load fiducial points
fiducial_pt_list <- lapply(1:n_files, readMat.matrix)
save(fiducial_pt_list, file="../output/fiducial_pt_list.RData")
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(fiducial_pt_list, train_idx))
save(dat_train, file="../output/feature_train.RData")
}else{
load(file="../output/feature_train.RData")
}
tm_feature_test <- NA
if(run.feature.test){
tm_feature_test <- system.time(dat_test <- feature(fiducial_pt_list, test_idx))
save(dat_test, file="../output/feature_test.RData")
}else{
load(file="../output/feature_test.RData")
}
source("../lib/train.R")
source("../lib/test.R")
# Train
t1 <- proc.time()
feature_train = dat_train[, -6007]
label_train = dat_train$label
pca_train <- prcomp(feature_train)
CPVE <- (cumsum((pca_train$sdev)^2)/sum((pca_train$sdev)^2))
plot(1:2400, CPVE, xlim=c(0,100), xlab="PCs", ylab="Total Variance")
for (i in 1:6006){
while (CPVE[i] <= 0.99){
i <- i+1
b <- i
}
return(b)
}
b
pca_train_b <- pca_train$x[,1:b]
dat_train_b <- data.frame(pca_train_b, label_train)
lda <- lda(label_train ~ ., data=dat_train_b)
label_predict_train <- predict(lda, data.frame(pca_train_b))
accuracy_train <- mean(label_predict_train$class == label_train)
accuracy_train
t2 <- proc.time()
time_train <- t2 - t1
time_train
# Test
feature_test = dat_test[, -6007]
label_test = dat_test$label
pca_test <- prcomp(feature_test)
pca_test_b <- pca_test$x[,1:b]
dat_test_b <- data.frame(pca_test_b, label_test)
label_predict_test <- predict(lda, data.frame(pca_test_b))
accuracy_test <- mean(label_predict_test$class == label_test)
accuracy_test
time_test <- system.time(label_predict_test <- predict(lda, data.frame(pca_test_b)))
time_test
nRows <- nrow(dat_train_b)
splitPlan <- kWayCrossValidation(nRows, K, NULL, NULL)
acc_test <- rep(NA, K)
acc_test_means <- rep(NA, b)
for (j in 2:b){
data_new <- data.frame(dat_train_b[,1:j], label_train)
feature_new <- data.frame(data_new[,-(j+1)])
for (i in 1:K) {
split <- splitPlan[[i]]
model <- lda(label_train ~ ., data = data_new[split$train,])
model.pred.cv <- predict(model, newdata = data.frame(feature_new[split$app,]))
acc_test[i] <- mean(model.pred.cv$class == data_new['label_train'][split$app,])
}
acc_test_means[j] <- mean(acc_test)
}
acc_test_means
res_cv <- as.data.frame(res_cv)
dim(pca_train$x)
dim(feature_train)
b<-200
nRows <- nrow(dat_train_b)
splitPlan <- kWayCrossValidation(nRows, K, NULL, NULL)
acc_test <- rep(NA, K)
acc_test_means <- rep(NA, b)
for (j in 2:b){
data_new <- data.frame(dat_train_b[,1:j], label_train)
feature_new <- data.frame(data_new[,-(j+1)])
for (i in 1:K) {
split <- splitPlan[[i]]
model <- lda(label_train ~ ., data = data_new[split$train,])
model.pred.cv <- predict(model, newdata = data.frame(feature_new[split$app,]))
acc_test[i] <- mean(model.pred.cv$class == data_new['label_train'][split$app,])
}
acc_test_means[j] <- mean(acc_test)
}
CPVE <- (cumsum((pca_train$sdev)^2)/sum((pca_train$sdev)^2))
plot(1:2400, CPVE, xlim=c(0,100), xlab="PCs", ylab="Total Variance")
for (i in 1:6006){
while (CPVE[i] <= 0.99){
i <- i+1
b <- i
}
return(b)
}
b
nRows <- nrow(dat_train_b)
splitPlan <- kWayCrossValidation(nRows, K, NULL, NULL)
acc_test <- rep(NA, K)
acc_test_means <- rep(NA, b)
for (j in 2:b){
data_new <- data.frame(dat_train_b[,1:j], label_train)
feature_new <- data.frame(data_new[,-(j+1)])
for (i in 1:K) {
split <- splitPlan[[i]]
model <- lda(label_train ~ ., data = data_new[split$train,])
model.pred.cv <- predict(model, newdata = data.frame(feature_new[split$app,]))
acc_test[i] <- mean(model.pred.cv$class == data_new['label_train'][split$app,])
}
acc_test_means[j] <- mean(acc_test)
}
acc_test_means
max(acc_test_means)
max(acc_test_means[,-1])
max(acc_test_means])
min(acc_test_means)
max(acc_test_means)
# Train
t1 <- proc.time()
feature_train = dat_train[, -6007]
label_train = dat_train$label
pca_train <- prcomp(feature_train)
CPVE <- (cumsum((pca_train$sdev)^2)/sum((pca_train$sdev)^2))
plot(1:2400, CPVE, xlim=c(0,100), xlab="PCs", ylab="Total Variance")
for (i in 1:6006){
while (CPVE[i] <= 0.99){
i <- i+1
b <- i
}
return(b)
}
b
pca_train_b <- pca_train$x[,1:b]
dat_train_b <- data.frame(pca_train_b, label_train)
lda <- lda(label_train ~ ., data=dat_train_b)
label_predict_train <- predict(lda, data.frame(pca_train_b))
accuracy_train <- mean(label_predict_train$class == label_train)
accuracy_train
t2 <- proc.time()
time_train <- t2 - t1
time_train
# Test
feature_test = dat_test[, -6007]
label_test = dat_test$label
pca_test <- prcomp(feature_test)
pca_test_b <- pca_test$x[,1:b]
dat_test_b <- data.frame(pca_test_b, label_test)
label_predict_test <- predict(lda, data.frame(pca_test_b))
accuracy_test <- mean(label_predict_test$class == label_test)
accuracy_test
time_test <- system.time(label_predict_test <- predict(lda, data.frame(pca_test_b)))
time_test
nRows <- nrow(dat_train_b)
splitPlan <- kWayCrossValidation(nRows, K, NULL, NULL)
acc_test <- rep(NA, K)
acc_test_means <- rep(NA, b)
for (j in 2:b){
data_new <- data.frame(dat_train_b[,1:j], label_train)
feature_new <- data.frame(data_new[,-(j+1)])
for (i in 1:K) {
split <- splitPlan[[i]]
model <- lda(label_train ~ ., data = data_new[split$train,])
model.pred.cv <- predict(model, newdata = data.frame(feature_new[split$app,]))
acc_test[i] <- mean(model.pred.cv$class == data_new['label_train'][split$app,])
}
acc_test_means[j] <- mean(acc_test)
}
acc_test_means
acc_test_means
